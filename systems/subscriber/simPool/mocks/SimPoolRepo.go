// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/subscriber/simPool/pkg/db"
)

// SimPoolRepo is an autogenerated mock type for the SimPoolRepo type
type SimPoolRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: networkId, orgId, iccid, msisdn, isAllocated, simType
func (_m *SimPoolRepo) Add(networkId string, orgId uint64, iccid string, msisdn string, isAllocated bool, simType string) ([]db.SimPool, error) {
	ret := _m.Called(networkId, orgId, iccid, msisdn, isAllocated, simType)

	var r0 []db.SimPool
	if rf, ok := ret.Get(0).(func(string, uint64, string, string, bool, string) []db.SimPool); ok {
		r0 = rf(networkId, orgId, iccid, msisdn, isAllocated, simType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.SimPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, string, string, bool, string) error); ok {
		r1 = rf(networkId, orgId, iccid, msisdn, isAllocated, simType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: Id
func (_m *SimPoolRepo) Delete(Id uint64) error {
	ret := _m.Called(Id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(Id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: Id, SimType
func (_m *SimPoolRepo) GetStats(Id uint64, SimType string) ([]db.SimPool, error) {
	ret := _m.Called(Id, SimType)

	var r0 []db.SimPool
	if rf, ok := ret.Get(0).(func(uint64, string) []db.SimPool); ok {
		r0 = rf(Id, SimType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.SimPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, string) error); ok {
		r1 = rf(Id, SimType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: fileUrl, simType, orgId
func (_m *SimPoolRepo) Upload(fileUrl string, simType string, orgId uint64) ([]db.SimPool, error) {
	ret := _m.Called(fileUrl, simType, orgId)

	var r0 []db.SimPool
	if rf, ok := ret.Get(0).(func(string, string, uint64) []db.SimPool); ok {
		r0 = rf(fileUrl, simType, orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.SimPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64) error); ok {
		r1 = rf(fileUrl, simType, orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimPoolRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimPoolRepo creates a new instance of SimPoolRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimPoolRepo(t mockConstructorTestingTNewSimPoolRepo) *SimPoolRepo {
	mock := &SimPoolRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
