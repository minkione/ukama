// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/subscriber/sim-pool/pkg/db"
)

// SimRepo is an autogenerated mock type for the SimRepo type
type SimRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: sims
func (_m *SimRepo) Add(sims []db.Sim) error {
	ret := _m.Called(sims)

	var r0 error
	if rf, ok := ret.Get(0).(func([]db.Sim) error); ok {
		r0 = rf(sims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: Id
func (_m *SimRepo) Delete(Id []uint64) error {
	ret := _m.Called(Id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint64) error); ok {
		r0 = rf(Id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: SimType
func (_m *SimRepo) GetStats(SimType string) ([]db.Sim, error) {
	ret := _m.Called(SimType)

	var r0 []db.Sim
	if rf, ok := ret.Get(0).(func(string) []db.Sim); ok {
		r0 = rf(SimType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Sim)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(SimType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimRepo creates a new instance of SimRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimRepo(t mockConstructorTestingTNewSimRepo) *SimRepo {
	mock := &SimRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
