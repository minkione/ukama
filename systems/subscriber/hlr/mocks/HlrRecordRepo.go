// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/subscriber/hlr/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// HlrRecordRepo is an autogenerated mock type for the HlrRecordRepo type
type HlrRecordRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: record
func (_m *HlrRecordRepo) Add(record *db.Hlr) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Hlr) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: imsi, nestedFunc
func (_m *HlrRecordRepo) Delete(imsi string, nestedFunc ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, imsi)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...func(*gorm.DB) error) error); ok {
		r0 = rf(imsi, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIccid provides a mock function with given fields: iccid, nestedFunc
func (_m *HlrRecordRepo) DeleteByIccid(iccid string, nestedFunc ...func(*gorm.DB) error) error {
	_va := make([]interface{}, len(nestedFunc))
	for _i := range nestedFunc {
		_va[_i] = nestedFunc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, iccid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...func(*gorm.DB) error) error); ok {
		r0 = rf(iccid, nestedFunc...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *HlrRecordRepo) Get(id int) (*db.Hlr, error) {
	ret := _m.Called(id)

	var r0 *db.Hlr
	if rf, ok := ret.Get(0).(func(int) *db.Hlr); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Hlr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIccid provides a mock function with given fields: iccid
func (_m *HlrRecordRepo) GetByIccid(iccid string) (*db.Hlr, error) {
	ret := _m.Called(iccid)

	var r0 *db.Hlr
	if rf, ok := ret.Get(0).(func(string) *db.Hlr); ok {
		r0 = rf(iccid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Hlr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iccid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByImsi provides a mock function with given fields: imsi
func (_m *HlrRecordRepo) GetByImsi(imsi string) (*db.Hlr, error) {
	ret := _m.Called(imsi)

	var r0 *db.Hlr
	if rf, ok := ret.Get(0).(func(string) *db.Hlr); ok {
		r0 = rf(imsi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Hlr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: imsi, record
func (_m *HlrRecordRepo) Update(imsi string, record *db.Hlr) error {
	ret := _m.Called(imsi, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *db.Hlr) error); ok {
		r0 = rf(imsi, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePackage provides a mock function with given fields: imsi, packageId
func (_m *HlrRecordRepo) UpdatePackage(imsi string, packageId uuid.UUID) error {
	ret := _m.Called(imsi, packageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) error); ok {
		r0 = rf(imsi, packageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTai provides a mock function with given fields: imis, tai
func (_m *HlrRecordRepo) UpdateTai(imis string, tai db.Tai) error {
	ret := _m.Called(imis, tai)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, db.Tai) error); ok {
		r0 = rf(imis, tai)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHlrRecordRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewHlrRecordRepo creates a new instance of HlrRecordRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHlrRecordRepo(t mockConstructorTestingTNewHlrRecordRepo) *HlrRecordRepo {
	mock := &HlrRecordRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
