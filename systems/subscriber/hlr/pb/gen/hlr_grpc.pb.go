// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: hlr.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HlrRecordServiceClient is the client API for HlrRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HlrRecordServiceClient interface {
	Update(ctx context.Context, in *UpdateRecordReq, opts ...grpc.CallOption) (*UpdateRecordResp, error)
	// Subscriber Agent
	Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error)
	Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error)
	UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error)
	// Node Gateway
	Get(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordResp, error)
	UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error)
	UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error)
}

type hlrRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHlrRecordServiceClient(cc grpc.ClientConnInterface) HlrRecordServiceClient {
	return &hlrRecordServiceClient{cc}
}

func (c *hlrRecordServiceClient) Update(ctx context.Context, in *UpdateRecordReq, opts ...grpc.CallOption) (*UpdateRecordResp, error) {
	out := new(UpdateRecordResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*ActivateResp, error) {
	out := new(ActivateResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) Inactivate(ctx context.Context, in *InactivateReq, opts ...grpc.CallOption) (*InactivateResp, error) {
	out := new(InactivateResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/Inactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*UpdatePackageResp, error) {
	out := new(UpdatePackageResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) Get(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordResp, error) {
	out := new(GetRecordResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) UpdateGuti(ctx context.Context, in *UpdateGutiReq, opts ...grpc.CallOption) (*UpdateGutiResp, error) {
	out := new(UpdateGutiResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/UpdateGuti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hlrRecordServiceClient) UpdateTai(ctx context.Context, in *UpdateTaiReq, opts ...grpc.CallOption) (*UpdateTaiResp, error) {
	out := new(UpdateTaiResp)
	err := c.cc.Invoke(ctx, "/ukama.hss.v1.HlrRecordService/UpdateTai", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HlrRecordServiceServer is the server API for HlrRecordService service.
// All implementations must embed UnimplementedHlrRecordServiceServer
// for forward compatibility
type HlrRecordServiceServer interface {
	Update(context.Context, *UpdateRecordReq) (*UpdateRecordResp, error)
	// Subscriber Agent
	Activate(context.Context, *ActivateReq) (*ActivateResp, error)
	Inactivate(context.Context, *InactivateReq) (*InactivateResp, error)
	UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error)
	// Node Gateway
	Get(context.Context, *GetRecordReq) (*GetRecordResp, error)
	UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error)
	UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error)
	mustEmbedUnimplementedHlrRecordServiceServer()
}

// UnimplementedHlrRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHlrRecordServiceServer struct {
}

func (UnimplementedHlrRecordServiceServer) Update(context.Context, *UpdateRecordReq) (*UpdateRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHlrRecordServiceServer) Activate(context.Context, *ActivateReq) (*ActivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedHlrRecordServiceServer) Inactivate(context.Context, *InactivateReq) (*InactivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inactivate not implemented")
}
func (UnimplementedHlrRecordServiceServer) UpdatePackage(context.Context, *UpdatePackageReq) (*UpdatePackageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedHlrRecordServiceServer) Get(context.Context, *GetRecordReq) (*GetRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHlrRecordServiceServer) UpdateGuti(context.Context, *UpdateGutiReq) (*UpdateGutiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuti not implemented")
}
func (UnimplementedHlrRecordServiceServer) UpdateTai(context.Context, *UpdateTaiReq) (*UpdateTaiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTai not implemented")
}
func (UnimplementedHlrRecordServiceServer) mustEmbedUnimplementedHlrRecordServiceServer() {}

// UnsafeHlrRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HlrRecordServiceServer will
// result in compilation errors.
type UnsafeHlrRecordServiceServer interface {
	mustEmbedUnimplementedHlrRecordServiceServer()
}

func RegisterHlrRecordServiceServer(s grpc.ServiceRegistrar, srv HlrRecordServiceServer) {
	s.RegisterService(&HlrRecordService_ServiceDesc, srv)
}

func _HlrRecordService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).Update(ctx, req.(*UpdateRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).Activate(ctx, req.(*ActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_Inactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).Inactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/Inactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).Inactivate(ctx, req.(*InactivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).UpdatePackage(ctx, req.(*UpdatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).Get(ctx, req.(*GetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_UpdateGuti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGutiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).UpdateGuti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/UpdateGuti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).UpdateGuti(ctx, req.(*UpdateGutiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HlrRecordService_UpdateTai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrRecordServiceServer).UpdateTai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.hss.v1.HlrRecordService/UpdateTai",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrRecordServiceServer).UpdateTai(ctx, req.(*UpdateTaiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HlrRecordService_ServiceDesc is the grpc.ServiceDesc for HlrRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HlrRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.hss.v1.HlrRecordService",
	HandlerType: (*HlrRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _HlrRecordService_Update_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _HlrRecordService_Activate_Handler,
		},
		{
			MethodName: "Inactivate",
			Handler:    _HlrRecordService_Inactivate_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _HlrRecordService_UpdatePackage_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HlrRecordService_Get_Handler,
		},
		{
			MethodName: "UpdateGuti",
			Handler:    _HlrRecordService_UpdateGuti_Handler,
		},
		{
			MethodName: "UpdateTai",
			Handler:    _HlrRecordService_UpdateTai_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hlr.proto",
}
