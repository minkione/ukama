// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/hlr/pb/gen"
)

// HlrRecordServiceServer is an autogenerated mock type for the HlrRecordServiceServer type
type HlrRecordServiceServer struct {
	mock.Mock
}

// Activate provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) Activate(_a0 context.Context, _a1 *gen.ActivateReq) (*gen.ActivateResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ActivateResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateReq) *gen.ActivateResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) Get(_a0 context.Context, _a1 *gen.GetRecordReq) (*gen.GetRecordResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetRecordResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetRecordReq) *gen.GetRecordResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetRecordResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetRecordReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inactivate provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) Inactivate(_a0 context.Context, _a1 *gen.InactivateReq) (*gen.InactivateResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.InactivateResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.InactivateReq) *gen.InactivateResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.InactivateResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.InactivateReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadIccid provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) ReadIccid(_a0 context.Context, _a1 *gen.ReadReq) (*gen.ReadResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ReadResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReadReq) *gen.ReadResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReadResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReadReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGuti provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) UpdateGuti(_a0 context.Context, _a1 *gen.UpdateGutiReq) (*gen.UpdateGutiResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateGutiResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateGutiReq) *gen.UpdateGutiResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateGutiResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateGutiReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) UpdatePackage(_a0 context.Context, _a1 *gen.UpdatePackageReq) (*gen.UpdatePackageResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdatePackageResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdatePackageReq) *gen.UpdatePackageResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdatePackageResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdatePackageReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTai provides a mock function with given fields: _a0, _a1
func (_m *HlrRecordServiceServer) UpdateTai(_a0 context.Context, _a1 *gen.UpdateTaiReq) (*gen.UpdateTaiResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.UpdateTaiResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UpdateTaiReq) *gen.UpdateTaiResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UpdateTaiResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UpdateTaiReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedHlrRecordServiceServer provides a mock function with given fields:
func (_m *HlrRecordServiceServer) mustEmbedUnimplementedHlrRecordServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewHlrRecordServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewHlrRecordServiceServer creates a new instance of HlrRecordServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHlrRecordServiceServer(t mockConstructorTestingTNewHlrRecordServiceServer) *HlrRecordServiceServer {
	mock := &HlrRecordServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
