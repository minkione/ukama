// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/subscriber/subscriber/pkg/db"
)

// SubscriberRepo is an autogenerated mock type for the SubscriberRepo type
type SubscriberRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: subscriber
func (_m *SubscriberRepo) Add(subscriber *db.Subscriber) error {
	ret := _m.Called(subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Subscriber) error); ok {
		r0 = rf(subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: subscriberId
func (_m *SubscriberRepo) Delete(subscriberId string) error {
	ret := _m.Called(subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: subscriberId
func (_m *SubscriberRepo) Get(subscriberId string) (*db.Subscriber, error) {
	ret := _m.Called(subscriberId)

	var r0 *db.Subscriber
	if rf, ok := ret.Get(0).(func(string) *db.Subscriber); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: subscriberId, sub
func (_m *SubscriberRepo) Update(subscriberId string, sub db.Subscriber) (*db.Subscriber, error) {
	ret := _m.Called(subscriberId, sub)

	var r0 *db.Subscriber
	if rf, ok := ret.Get(0).(func(string, db.Subscriber) *db.Subscriber); ok {
		r0 = rf(subscriberId, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, db.Subscriber) error); ok {
		r1 = rf(subscriberId, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriberRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriberRepo creates a new instance of SubscriberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriberRepo(t mockConstructorTestingTNewSubscriberRepo) *SubscriberRepo {
	mock := &SubscriberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
