// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/subscriber/api-gateway/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SubscriberRegistryServiceClient is an autogenerated mock type for the SubscriberRegistryServiceClient type
type SubscriberRegistryServiceClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *SubscriberRegistryServiceClient) Add(ctx context.Context, in *gen.AddSubscriberRequest, opts ...grpc.CallOption) (*gen.AddSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddSubscriberRequest, ...grpc.CallOption) *gen.AddSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *SubscriberRegistryServiceClient) Delete(ctx context.Context, in *gen.DeleteSubscriberRequest, opts ...grpc.CallOption) (*gen.DeleteSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeleteSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeleteSubscriberRequest, ...grpc.CallOption) *gen.DeleteSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeleteSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *SubscriberRegistryServiceClient) Get(ctx context.Context, in *gen.GetSubscriberRequest, opts ...grpc.CallOption) (*gen.GetSubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSubscriberRequest, ...grpc.CallOption) *gen.GetSubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriberRegistryServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriberRegistryServiceClient creates a new instance of SubscriberRegistryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriberRegistryServiceClient(t mockConstructorTestingTNewSubscriberRegistryServiceClient) *SubscriberRegistryServiceClient {
	mock := &SubscriberRegistryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
