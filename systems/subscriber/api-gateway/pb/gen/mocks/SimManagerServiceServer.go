// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/api-gateway/pb/gen"
)

// SimManagerServiceServer is an autogenerated mock type for the SimManagerServiceServer type
type SimManagerServiceServer struct {
	mock.Mock
}

// DummyRPC provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) DummyRPC(_a0 context.Context, _a1 *gen.Dummy) (*gen.Dummy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *gen.Dummy) *gen.Dummy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.Dummy) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSimManagerServiceServer provides a mock function with given fields:
func (_m *SimManagerServiceServer) mustEmbedUnimplementedSimManagerServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewSimManagerServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimManagerServiceServer creates a new instance of SimManagerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceServer(t mockConstructorTestingTNewSimManagerServiceServer) *SimManagerServiceServer {
	mock := &SimManagerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
