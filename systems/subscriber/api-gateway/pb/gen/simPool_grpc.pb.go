// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: simPool.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimServiceClient is the client API for SimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimServiceClient interface {
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	GetByIccid(ctx context.Context, in *GetByIccidRequest, opts ...grpc.CallOption) (*GetByIccidResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type simServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimServiceClient(cc grpc.ClientConnInterface) SimServiceClient {
	return &simServiceClient{cc}
}

func (c *simServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim.v1.SimService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) GetByIccid(ctx context.Context, in *GetByIccidRequest, opts ...grpc.CallOption) (*GetByIccidResponse, error) {
	out := new(GetByIccidResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim.v1.SimService/GetByIccid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim.v1.SimService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim.v1.SimService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/ukama.sim.v1.SimService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimServiceServer is the server API for SimService service.
// All implementations must embed UnimplementedSimServiceServer
// for forward compatibility
type SimServiceServer interface {
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	GetByIccid(context.Context, *GetByIccidRequest) (*GetByIccidResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedSimServiceServer()
}

// UnimplementedSimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimServiceServer struct {
}

func (UnimplementedSimServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSimServiceServer) GetByIccid(context.Context, *GetByIccidRequest) (*GetByIccidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIccid not implemented")
}
func (UnimplementedSimServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedSimServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSimServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSimServiceServer) mustEmbedUnimplementedSimServiceServer() {}

// UnsafeSimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimServiceServer will
// result in compilation errors.
type UnsafeSimServiceServer interface {
	mustEmbedUnimplementedSimServiceServer()
}

func RegisterSimServiceServer(s grpc.ServiceRegistrar, srv SimServiceServer) {
	s.RegisterService(&SimService_ServiceDesc, srv)
}

func _SimService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim.v1.SimService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_GetByIccid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIccidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).GetByIccid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim.v1.SimService/GetByIccid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).GetByIccid(ctx, req.(*GetByIccidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim.v1.SimService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim.v1.SimService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.sim.v1.SimService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimService_ServiceDesc is the grpc.ServiceDesc for SimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.sim.v1.SimService",
	HandlerType: (*SimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStats",
			Handler:    _SimService_GetStats_Handler,
		},
		{
			MethodName: "GetByIccid",
			Handler:    _SimService_GetByIccid_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _SimService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SimService_Delete_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _SimService_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simPool.proto",
}
