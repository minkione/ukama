// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscriber.proto

package gen

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *DeleteSubscriberRequest) Validate() error {
	return nil
}
func (this *GetByNetworkRequest) Validate() error {
	return nil
}
func (this *GetByNetworkResponse) Validate() error {
	for _, item := range this.Subscribers {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscribers", err)
			}
		}
	}
	return nil
}
func (this *DeleteSubscriberResponse) Validate() error {
	return nil
}
func (this *GetSubscriberRequest) Validate() error {
	return nil
}
func (this *GetSubscriberResponse) Validate() error {
	if this.Subscriber != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Subscriber); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Subscriber", err)
		}
	}
	return nil
}
func (this *AddSubscriberRequest) Validate() error {
	if this.DateOfBirth != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DateOfBirth); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DateOfBirth", err)
		}
	}
	return nil
}
func (this *UpdateSubscriberRequest) Validate() error {
	return nil
}
func (this *UpdateSubscriberResponse) Validate() error {
	return nil
}
func (this *AddSubscriberResponse) Validate() error {
	if this.Subscriber != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Subscriber); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Subscriber", err)
		}
	}
	return nil
}
func (this *Subscriber) Validate() error {
	for _, item := range this.Sim {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Sim", err)
			}
		}
	}
	return nil
}
func (this *Sim) Validate() error {
	if this.AllocatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AllocatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AllocatedAt", err)
		}
	}
	return nil
}
