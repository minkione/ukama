// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/api-gateway/pb/gen"
)

// subscriberRegistry is an autogenerated mock type for the subscriberRegistry type
type subscriberRegistry struct {
	mock.Mock
}

// AddSubscriber provides a mock function with given fields: req
func (_m *subscriberRegistry) AddSubscriber(req *gen.AddSubscriberRequest) (*gen.AddSubscriberResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AddSubscriberResponse
	if rf, ok := ret.Get(0).(func(*gen.AddSubscriberRequest) *gen.AddSubscriberResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AddSubscriberRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriber provides a mock function with given fields: req
func (_m *subscriberRegistry) DeleteSubscriber(req *gen.DeleteSubscriberRequest) (*gen.DeleteSubscriberResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.DeleteSubscriberResponse
	if rf, ok := ret.Get(0).(func(*gen.DeleteSubscriberRequest) *gen.DeleteSubscriberResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.DeleteSubscriberRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriber provides a mock function with given fields: req
func (_m *subscriberRegistry) GetSubscriber(req *gen.GetSubscriberRequest) (*gen.GetSubscriberResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetSubscriberResponse
	if rf, ok := ret.Get(0).(func(*gen.GetSubscriberRequest) *gen.GetSubscriberResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetSubscriberRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewSubscriberRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// newSubscriberRegistry creates a new instance of subscriberRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newSubscriberRegistry(t mockConstructorTestingTnewSubscriberRegistry) *subscriberRegistry {
	mock := &subscriberRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
