// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/api-gateway/pb/gen"
)

// simPool is an autogenerated mock type for the simPool type
type simPool struct {
	mock.Mock
}

// AddSimsToSimPool provides a mock function with given fields: req
func (_m *simPool) AddSimsToSimPool(req *gen.AddRequest) (*gen.AddResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.AddResponse
	if rf, ok := ret.Get(0).(func(*gen.AddRequest) *gen.AddResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.AddRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSimFromSimPool provides a mock function with given fields: req
func (_m *simPool) DeleteSimFromSimPool(req *gen.DeleteRequest) (*gen.DeleteResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.DeleteResponse
	if rf, ok := ret.Get(0).(func(*gen.DeleteRequest) *gen.DeleteResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.DeleteRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimPoolStats provides a mock function with given fields: req
func (_m *simPool) GetSimPoolStats(req *gen.GetStatsRequest) (*gen.GetStatsResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.GetStatsResponse
	if rf, ok := ret.Get(0).(func(*gen.GetStatsRequest) *gen.GetStatsResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetStatsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.GetStatsRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadSimsToSimPool provides a mock function with given fields: req
func (_m *simPool) UploadSimsToSimPool(req *gen.UploadRequest) (*gen.UploadResponse, error) {
	ret := _m.Called(req)

	var r0 *gen.UploadResponse
	if rf, ok := ret.Get(0).(func(*gen.UploadRequest) *gen.UploadResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UploadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gen.UploadRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewSimPool interface {
	mock.TestingT
	Cleanup(func())
}

// newSimPool creates a new instance of simPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newSimPool(t mockConstructorTestingTnewSimPool) *simPool {
	mock := &simPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
