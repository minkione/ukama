// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen"
)

// SimManagerServiceServer is an autogenerated mock type for the SimManagerServiceServer type
type SimManagerServiceServer struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) ActivateSim(_a0 context.Context, _a1 *gen.ActivateSimRequest) (*gen.ActivateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.ActivateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest) *gen.ActivateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSim provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) DeactivateSim(_a0 context.Context, _a1 *gen.DeactivateSimRequest) (*gen.DeactivateSimResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.DeactivateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest) *gen.DeactivateSimResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeactivateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeactivateSimRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimInfo provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimInfo(_a0 context.Context, _a1 *gen.GetSimInfoRequest) (*gen.GetSimInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimInfoRequest) *gen.GetSimInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimUsage provides a mock function with given fields: _a0, _a1
func (_m *SimManagerServiceServer) GetSimUsage(_a0 context.Context, _a1 *gen.GetSimUsageRequest) (*gen.GetSimUsageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.GetSimUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimUsageRequest) *gen.GetSimUsageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimUsageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSimManagerServiceServer provides a mock function with given fields:
func (_m *SimManagerServiceServer) mustEmbedUnimplementedSimManagerServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewSimManagerServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimManagerServiceServer creates a new instance of SimManagerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceServer(t mockConstructorTestingTNewSimManagerServiceServer) *SimManagerServiceServer {
	mock := &SimManagerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
