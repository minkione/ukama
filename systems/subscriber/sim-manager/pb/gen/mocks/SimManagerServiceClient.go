// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/subscriber/sim-manager/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SimManagerServiceClient is an autogenerated mock type for the SimManagerServiceClient type
type SimManagerServiceClient struct {
	mock.Mock
}

// ActivateSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) ActivateSim(ctx context.Context, in *gen.ActivateSimRequest, opts ...grpc.CallOption) (*gen.ActivateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.ActivateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ActivateSimRequest, ...grpc.CallOption) *gen.ActivateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ActivateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.ActivateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPackageForSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) AddPackageForSim(ctx context.Context, in *gen.AddPackageRequest, opts ...grpc.CallOption) (*gen.AddPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AddPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) *gen.AddPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AddPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AddPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) AllocateSim(ctx context.Context, in *gen.AllocateSimRequest, opts ...grpc.CallOption) (*gen.AllocateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.AllocateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.AllocateSimRequest, ...grpc.CallOption) *gen.AllocateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.AllocateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.AllocateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) DeactivateSim(ctx context.Context, in *gen.DeactivateSimRequest, opts ...grpc.CallOption) (*gen.DeactivateSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.DeactivateSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.DeactivateSimRequest, ...grpc.CallOption) *gen.DeactivateSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DeactivateSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.DeactivateSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSim(ctx context.Context, in *gen.GetSimRequest, opts ...grpc.CallOption) (*gen.GetSimResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) *gen.GetSimResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimUsage provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimUsage(ctx context.Context, in *gen.GetSimUsageRequest, opts ...grpc.CallOption) (*gen.GetSimUsageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimUsageRequest, ...grpc.CallOption) *gen.GetSimUsageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimUsageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimsBySubscriber provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) GetSimsBySubscriber(ctx context.Context, in *gen.GetSimsBySubscriberRequest, opts ...grpc.CallOption) (*gen.GetSimsBySubscriberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.GetSimsBySubscriberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.GetSimsBySubscriberRequest, ...grpc.CallOption) *gen.GetSimsBySubscriberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.GetSimsBySubscriberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.GetSimsBySubscriberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePackageForSim provides a mock function with given fields: ctx, in, opts
func (_m *SimManagerServiceClient) RemovePackageForSim(ctx context.Context, in *gen.RemovePackageRequest, opts ...grpc.CallOption) (*gen.RemovePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RemovePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RemovePackageRequest, ...grpc.CallOption) *gen.RemovePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RemovePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RemovePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSimManagerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimManagerServiceClient creates a new instance of SimManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimManagerServiceClient(t mockConstructorTestingTNewSimManagerServiceClient) *SimManagerServiceClient {
	mock := &SimManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
