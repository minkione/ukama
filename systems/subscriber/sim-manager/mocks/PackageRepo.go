// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	db "github.com/ukama/ukama/systems/subscriber/sim-manager/pkg/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PackageRepo is an autogenerated mock type for the PackageRepo type
type PackageRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: pkg, nestedFunc
func (_m *PackageRepo) Add(pkg *db.Package, nestedFunc func(*db.Package, *gorm.DB) error) error {
	ret := _m.Called(pkg, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.Package, func(*db.Package, *gorm.DB) error) error); ok {
		r0 = rf(pkg, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: packageID, nestedFunc
func (_m *PackageRepo) Delete(packageID uuid.UUID, nestedFunc func(uuid.UUID, *gorm.DB) error) error {
	ret := _m.Called(packageID, nestedFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, func(uuid.UUID, *gorm.DB) error) error); ok {
		r0 = rf(packageID, nestedFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPackageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageRepo creates a new instance of PackageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageRepo(t mockConstructorTestingTNewPackageRepo) *PackageRepo {
	mock := &PackageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
