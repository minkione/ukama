// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/ukama/ukama/systems/init/msgClient/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MsgClientServiceClient is an autogenerated mock type for the MsgClientServiceClient type
type MsgClientServiceClient struct {
	mock.Mock
}

// PusblishMsg provides a mock function with given fields: ctx, in, opts
func (_m *MsgClientServiceClient) PusblishMsg(ctx context.Context, in *gen.PublishMsgRequest, opts ...grpc.CallOption) (*gen.PublishMsgResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.PublishMsgResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gen.PublishMsgRequest, ...grpc.CallOption) *gen.PublishMsgResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.PublishMsgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.PublishMsgRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterRoutes provides a mock function with given fields: ctx, in, opts
func (_m *MsgClientServiceClient) RegisterRoutes(ctx context.Context, in *gen.RegisterRoutesReq, opts ...grpc.CallOption) (*gen.RegisterRoutesResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RegisterRoutesResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterRoutesReq, ...grpc.CallOption) *gen.RegisterRoutesResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RegisterRoutesResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RegisterRoutesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: ctx, in, opts
func (_m *MsgClientServiceClient) RegisterService(ctx context.Context, in *gen.RegisterServiceReq, opts ...grpc.CallOption) (*gen.RegisterServiceResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.RegisterServiceResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.RegisterServiceReq, ...grpc.CallOption) *gen.RegisterServiceResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.RegisterServiceResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.RegisterServiceReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterRoutes provides a mock function with given fields: ctx, in, opts
func (_m *MsgClientServiceClient) UnregisterRoutes(ctx context.Context, in *gen.UnregisterRoutesReq, opts ...grpc.CallOption) (*gen.UnregisterRoutesResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UnregisterRoutesResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UnregisterRoutesReq, ...grpc.CallOption) *gen.UnregisterRoutesResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UnregisterRoutesResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UnregisterRoutesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterService provides a mock function with given fields: ctx, in, opts
func (_m *MsgClientServiceClient) UnregisterService(ctx context.Context, in *gen.UnregisterServiceReq, opts ...grpc.CallOption) (*gen.UnregisterServiceResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gen.UnregisterServiceResp
	if rf, ok := ret.Get(0).(func(context.Context, *gen.UnregisterServiceReq, ...grpc.CallOption) *gen.UnregisterServiceResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UnregisterServiceResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gen.UnregisterServiceReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMsgClientServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgClientServiceClient creates a new instance of MsgClientServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgClientServiceClient(t mockConstructorTestingTNewMsgClientServiceClient) *MsgClientServiceClient {
	mock := &MsgClientServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
