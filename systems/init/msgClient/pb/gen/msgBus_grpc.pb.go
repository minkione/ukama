// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: msgBus.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgBusClient is the client API for MsgBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgBusClient interface {
	Initialize(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	PusblishMsg(ctx context.Context, in *PublishMsgRequest, opts ...grpc.CallOption) (*PublishMsgResponse, error)
}

type msgBusClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgBusClient(cc grpc.ClientConnInterface) MsgBusClient {
	return &msgBusClient{cc}
}

func (c *msgBusClient) Initialize(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/ukama.lookup.v1.MsgBus/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgBusClient) PusblishMsg(ctx context.Context, in *PublishMsgRequest, opts ...grpc.CallOption) (*PublishMsgResponse, error) {
	out := new(PublishMsgResponse)
	err := c.cc.Invoke(ctx, "/ukama.lookup.v1.MsgBus/PusblishMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgBusServer is the server API for MsgBus service.
// All implementations must embed UnimplementedMsgBusServer
// for forward compatibility
type MsgBusServer interface {
	Initialize(context.Context, *InitRequest) (*InitResponse, error)
	PusblishMsg(context.Context, *PublishMsgRequest) (*PublishMsgResponse, error)
	mustEmbedUnimplementedMsgBusServer()
}

// UnimplementedMsgBusServer must be embedded to have forward compatible implementations.
type UnimplementedMsgBusServer struct {
}

func (UnimplementedMsgBusServer) Initialize(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedMsgBusServer) PusblishMsg(context.Context, *PublishMsgRequest) (*PublishMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PusblishMsg not implemented")
}
func (UnimplementedMsgBusServer) mustEmbedUnimplementedMsgBusServer() {}

// UnsafeMsgBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgBusServer will
// result in compilation errors.
type UnsafeMsgBusServer interface {
	mustEmbedUnimplementedMsgBusServer()
}

func RegisterMsgBusServer(s grpc.ServiceRegistrar, srv MsgBusServer) {
	s.RegisterService(&MsgBus_ServiceDesc, srv)
}

func _MsgBus_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBusServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.lookup.v1.MsgBus/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBusServer).Initialize(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgBus_PusblishMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgBusServer).PusblishMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.lookup.v1.MsgBus/PusblishMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgBusServer).PusblishMsg(ctx, req.(*PublishMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgBus_ServiceDesc is the grpc.ServiceDesc for MsgBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.lookup.v1.MsgBus",
	HandlerType: (*MsgBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _MsgBus_Initialize_Handler,
		},
		{
			MethodName: "PusblishMsg",
			Handler:    _MsgBus_PusblishMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgBus.proto",
}
