// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: msgClient.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClientServiceClient is the client API for MsgClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClientServiceClient interface {
	RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceResp, error)
	RegisterRoutes(ctx context.Context, in *RegisterRoutesReq, opts ...grpc.CallOption) (*RegisterRoutesResp, error)
	UnregisterService(ctx context.Context, in *UnregisterServiceReq, opts ...grpc.CallOption) (*UnregisterServiceResp, error)
	UnregisterRoutes(ctx context.Context, in *UnregisterRoutesReq, opts ...grpc.CallOption) (*UnregisterRoutesResp, error)
	PusblishMsg(ctx context.Context, in *PublishMsgRequest, opts ...grpc.CallOption) (*PublishMsgResponse, error)
}

type msgClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClientServiceClient(cc grpc.ClientConnInterface) MsgClientServiceClient {
	return &msgClientServiceClient{cc}
}

func (c *msgClientServiceClient) RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceResp, error) {
	out := new(RegisterServiceResp)
	err := c.cc.Invoke(ctx, "/ukama.msgClient.v1.MsgClientService/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClientServiceClient) RegisterRoutes(ctx context.Context, in *RegisterRoutesReq, opts ...grpc.CallOption) (*RegisterRoutesResp, error) {
	out := new(RegisterRoutesResp)
	err := c.cc.Invoke(ctx, "/ukama.msgClient.v1.MsgClientService/RegisterRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClientServiceClient) UnregisterService(ctx context.Context, in *UnregisterServiceReq, opts ...grpc.CallOption) (*UnregisterServiceResp, error) {
	out := new(UnregisterServiceResp)
	err := c.cc.Invoke(ctx, "/ukama.msgClient.v1.MsgClientService/UnregisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClientServiceClient) UnregisterRoutes(ctx context.Context, in *UnregisterRoutesReq, opts ...grpc.CallOption) (*UnregisterRoutesResp, error) {
	out := new(UnregisterRoutesResp)
	err := c.cc.Invoke(ctx, "/ukama.msgClient.v1.MsgClientService/UnregisterRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClientServiceClient) PusblishMsg(ctx context.Context, in *PublishMsgRequest, opts ...grpc.CallOption) (*PublishMsgResponse, error) {
	out := new(PublishMsgResponse)
	err := c.cc.Invoke(ctx, "/ukama.msgClient.v1.MsgClientService/PusblishMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgClientServiceServer is the server API for MsgClientService service.
// All implementations must embed UnimplementedMsgClientServiceServer
// for forward compatibility
type MsgClientServiceServer interface {
	RegisterService(context.Context, *RegisterServiceReq) (*RegisterServiceResp, error)
	RegisterRoutes(context.Context, *RegisterRoutesReq) (*RegisterRoutesResp, error)
	UnregisterService(context.Context, *UnregisterServiceReq) (*UnregisterServiceResp, error)
	UnregisterRoutes(context.Context, *UnregisterRoutesReq) (*UnregisterRoutesResp, error)
	PusblishMsg(context.Context, *PublishMsgRequest) (*PublishMsgResponse, error)
	mustEmbedUnimplementedMsgClientServiceServer()
}

// UnimplementedMsgClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgClientServiceServer struct {
}

func (UnimplementedMsgClientServiceServer) RegisterService(context.Context, *RegisterServiceReq) (*RegisterServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedMsgClientServiceServer) RegisterRoutes(context.Context, *RegisterRoutesReq) (*RegisterRoutesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoutes not implemented")
}
func (UnimplementedMsgClientServiceServer) UnregisterService(context.Context, *UnregisterServiceReq) (*UnregisterServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterService not implemented")
}
func (UnimplementedMsgClientServiceServer) UnregisterRoutes(context.Context, *UnregisterRoutesReq) (*UnregisterRoutesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterRoutes not implemented")
}
func (UnimplementedMsgClientServiceServer) PusblishMsg(context.Context, *PublishMsgRequest) (*PublishMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PusblishMsg not implemented")
}
func (UnimplementedMsgClientServiceServer) mustEmbedUnimplementedMsgClientServiceServer() {}

// UnsafeMsgClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgClientServiceServer will
// result in compilation errors.
type UnsafeMsgClientServiceServer interface {
	mustEmbedUnimplementedMsgClientServiceServer()
}

func RegisterMsgClientServiceServer(s grpc.ServiceRegistrar, srv MsgClientServiceServer) {
	s.RegisterService(&MsgClientService_ServiceDesc, srv)
}

func _MsgClientService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgClientServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.msgClient.v1.MsgClientService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgClientServiceServer).RegisterService(ctx, req.(*RegisterServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgClientService_RegisterRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRoutesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgClientServiceServer).RegisterRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.msgClient.v1.MsgClientService/RegisterRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgClientServiceServer).RegisterRoutes(ctx, req.(*RegisterRoutesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgClientService_UnregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgClientServiceServer).UnregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.msgClient.v1.MsgClientService/UnregisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgClientServiceServer).UnregisterService(ctx, req.(*UnregisterServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgClientService_UnregisterRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRoutesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgClientServiceServer).UnregisterRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.msgClient.v1.MsgClientService/UnregisterRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgClientServiceServer).UnregisterRoutes(ctx, req.(*UnregisterRoutesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgClientService_PusblishMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgClientServiceServer).PusblishMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ukama.msgClient.v1.MsgClientService/PusblishMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgClientServiceServer).PusblishMsg(ctx, req.(*PublishMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgClientService_ServiceDesc is the grpc.ServiceDesc for MsgClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ukama.msgClient.v1.MsgClientService",
	HandlerType: (*MsgClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _MsgClientService_RegisterService_Handler,
		},
		{
			MethodName: "RegisterRoutes",
			Handler:    _MsgClientService_RegisterRoutes_Handler,
		},
		{
			MethodName: "UnregisterService",
			Handler:    _MsgClientService_UnregisterService_Handler,
		},
		{
			MethodName: "UnregisterRoutes",
			Handler:    _MsgClientService_UnregisterRoutes_Handler,
		},
		{
			MethodName: "PusblishMsg",
			Handler:    _MsgClientService_PusblishMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgClient.proto",
}
