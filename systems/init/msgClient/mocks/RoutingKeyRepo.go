// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/ukama/ukama/systems/init/msgClient/internal/db"
)

// RoutingKeyRepo is an autogenerated mock type for the RoutingKeyRepo type
type RoutingKeyRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: key
func (_m *RoutingKeyRepo) Add(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *RoutingKeyRepo) Get(key string) (*db.RoutingKeys, error) {
	ret := _m.Called(key)

	var r0 *db.RoutingKeys
	if rf, ok := ret.Get(0).(func(string) *db.RoutingKeys); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RoutingKeys)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *RoutingKeyRepo) List() (*db.RoutingKeys, error) {
	ret := _m.Called()

	var r0 *db.RoutingKeys
	if rf, ok := ret.Get(0).(func() *db.RoutingKeys); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RoutingKeys)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: key, serviceId
func (_m *RoutingKeyRepo) Register(key string, serviceId string) {
	_m.Called(key, serviceId)
}

// Remove provides a mock function with given fields: key
func (_m *RoutingKeyRepo) Remove(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnRegister provides a mock function with given fields: key, serviceId
func (_m *RoutingKeyRepo) UnRegister(key string, serviceId string) {
	_m.Called(key, serviceId)
}

type mockConstructorTestingTNewRoutingKeyRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoutingKeyRepo creates a new instance of RoutingKeyRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoutingKeyRepo(t mockConstructorTestingTNewRoutingKeyRepo) *RoutingKeyRepo {
	mock := &RoutingKeyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
