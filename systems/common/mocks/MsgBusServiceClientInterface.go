// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MsgBusServiceClientInterface is an autogenerated mock type for the MsgBusServiceClientInterface type
type MsgBusServiceClientInterface struct {
	mock.Mock
}

// PublishRequest provides a mock function with given fields: route, msg
func (_m *MsgBusServiceClientInterface) PublishRequest(route string, msg protoreflect.ProtoMessage) error {
	ret := _m.Called(route, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, protoreflect.ProtoMessage) error); ok {
		r0 = rf(route, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields:
func (_m *MsgBusServiceClientInterface) Register() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MsgBusServiceClientInterface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MsgBusServiceClientInterface) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMsgBusServiceClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgBusServiceClientInterface creates a new instance of MsgBusServiceClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgBusServiceClientInterface(t mockConstructorTestingTNewMsgBusServiceClientInterface) *MsgBusServiceClientInterface {
	mock := &MsgBusServiceClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
